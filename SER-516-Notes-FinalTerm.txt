Final Term

Slide 17	Clean Design II (2 Vid)
Slide 20,22	Structural Metrics (2 Vid)
Slide 25	Technical Debt(1 Vid)


Topics Sepecific to Final Term 		Video-Status	Slide-Status

Estimation and Velocity 				Done			
Clean Design I, II 						Done
Structural Metrics I, II, III			Done
Technical Debt							Done

Revise whole Mid Term Syllabus 


Estimation and Velocity 
	- Velocity = Story Points / Sprint
	- Sprint  = Size of Project 4 / Avg Velocity of P2 and P3




Clean Design I, II

Three Design Pattern and their class Diagram
	- Observer (Mouse Listeners)
	- Delegator (Professor TA Example)
	- Factory (Product Client)

when we want to share data between two modules good to use Observer Pattern

Kent Beck's Key Idea for Design Principle
	- Dependency Injection 
		- Nothing but using or Association
	- Seperation of Concern
		- Pattern
	-	Low Coupling 
		- Lowest amount of lines connecting things
		- Association better than composition
	- Readability

Too much Coupling will result in too much communication b/w team member that is bad.

Problems discussed for class diagrams 
	- Check if diamond or arrows are placed in correct direction,
	- Check if there are arrows or diamonds or just a line,
	- Loops are bad,
	- Think in terms of Model View Controller and what each class is and then decide.
	- Check if diamond is really required.
	- Association is better than composition


Structure Metrics I,II,III

How can we achieve these design principle
- Write Test
	- drive to single responsibity DI and interface
	- Increases Cohesion and decreases Coupling
	- Modularize
	- Shrink Function
	- Eliminate Fear of cleaning up code
- Eliminate Duplication
- Ensure Expressiveness
	- Naming Convention
	- Design pattern
- Minimize number of items


Three Metrics 
	- Acyclic Dependency Principle
		- More the loop bad the design
		- Loop is fine if it has a justification
	- Stable Abstract Principle 
		- More stable more abstract it should be 
		- Stablility means hard to change
		- Instability of 1 is best
	- Stable Dependency Principle
		- X->Y Y instability should be less
		- X->Y Y abstraction should be more
		- D = A + I - 1 Calculate - |D|
		- Ce - Output, Ca - Input


Technical Debt
Types
	- Naive
	- Unavoidable
	- Strategic

How debt gets created 
	- Bad design
	- Defects
	- Insufficient test coverage
	- Excessive Manual Testing 
	- Poor Integration Management
	- Lack Of Platform Experience
Consequences 
	- Unpredictable Tipping Point
	- Increased time to delivery
	- Defects
	- Cost of Change
	- Product Atrophy
	- Decreased Predictability
	- Under Performance
	- Frustation

Managing technical debt 
	- Managing the accural of tech debt
	- Making tech debt visible 
	- Servicing or repaying tech debt
