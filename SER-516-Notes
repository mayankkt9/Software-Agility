To Study

Material Given
Project Details
QuizLet.com
LockDown browser try
Consider reading slides and notes once again after you have completed everything

Application based question
	- Write User Story Error Free
	- Check Coding guideline and all



Material

Slide 2		Process Model & Agile		Som(2,3)		Done
Slide 3 	Agile and Project			Som(3,4) 		Done
Slide 4 	Agile and Project			Som(3,4)		Done
Slide 5		Clean Code					Martin
Slide 6		Clean Code					Martin
Slide 7		PBI | User Story			Rubin(5,6)		Done
Slide 8 	User Story					Rubin(4)		Done
Slide 9		Product Backlog				Rubin(6)		Done
Slide 10	Sprint						Rubin(4)		Done
Slide 11 	Clean Code					Martin
Slide 12 	Clean Code					Martin
Slide 13	Project	
Slide 14	Project
Slide 15	Clean Design				Martin(11)
Slide 16	Velocity					Rubin(7)

Project



Read Slides 2,3,4 and these notes.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Process Model

Types of Process Model
	- Agile
	- Prototype
		- instead of freezing the requirements before a design or coding can proceed, a throwaway prototype is built to understand the requirements. 
		- The Prototyping Model should be used when the requirements of the product are not clearly understood or are unstable. It can also be used if requirements are changing quickly. This model can be successfully used for developing user interfaces, high technology software-intensive systems, and systems with complex algorithms and interfaces. It is also a very good choice to demonstrate the technical feasibility of the product.
		- Missing functionality can be identified, which helps to reduce the risk of failure as Prototyping is also considered as a risk reduction activity in SDLC.
		- In prototype model we take user requirements. Prototypes are build. User feedback is available .Prototype model is like making E-COMMERCE websites.Other applications for which prototyping is applicable are certain classes of mathematical algorithms, subset of command driven systems and other applications where results can be easily examined without real-time interaction.However this model is not suitable for large heavy requirements or complex embedded system.
		- Desgin, Diagrams, UI, Feasibility check
	- Spiral
		- When costs and risk evaluation is important
		- For medium to high-risk projects
		- Long-term project commitment unwise because of potential changes to economic priorities
		- Users are unsure of their needs
		- Requirements are complex
		- New product line
		- Significant changes are expected (research and exploration)
	- V-Model
		- Where requirements are clearly defined and fixed.
		- The V-Model is used when ample technical resources are available with technical expertise.
		- It is not a good for complex and object-oriented projects.
		- This model focuses on verification and validation activities early in the life cycle thereby enhancing the probability of building an error-free and good quality product.

	- Waterfall

Incremental Model - There are some types of system where incremental development and delivery is
not the best approach. These are very large systems where development may involve teams working in different locations, some embedded systems where the software depends on hardware development and some critical systems where all the require- ments must be analyzed to check for interactions that may compromise the safety or security of the system.

These plan-driven approaches involve a significant overhead in planning, designing, and document- ing the system. This overhead is justified when the work of multiple development teams has to be coordinated, when the system is a critical system, and when many different people will be involved in maintaining the software over its lifetime.

Agile Manifesto
Individuals and interactions over processes and tools 
Working software over comprehensive documentation 
Customer collaboration over contract negotiation 
Responding to change over following a plan

Agile methods have been very successful for some types of system development:
1. Product development where a software company is developing a small or medium-sized product for sale.
2. Custom system development within an organization, where there is a clear com- mitment from the customer to become involved in the development process and where there are not a lot of external rules and regulations that affect the software.
Formal documentation is supposed to describe the system and so make it easier
for people changing the system to understand. In practice, however, formal docu- mentation is often not kept up to date and so does not accurately reflect the program code. For this reason, agile methods enthusiasts argue that it is a waste of time to write this documentation and that the key to implementing maintainable software is to produce high-quality, readable code. Agile practices therefore emphasize the importance of writing well-structured code and investing effort in code improve- ment. Therefore, the lack of documentation should not be a problem in maintaining systems developed using an agile approach.


In a plan-driven approach, iteration occurs within activities with formal documents used to communicate between stages of the process. For example, the require- ments will evolve and, ultimately, a requirements specification will be produced. This is then an input to the design and implementation process. In an agile approach, iteration occurs across activities. Therefore, the requirements and the design are developed together, rather than separately.


Only difference between plan driven and Agile is detailed documentation


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





Scrum Overview


Scrum Roles
	- Profuct Owner
	- Scrum Master
	- Development Team

Scrum Framework
	- Product Backlog Grooming 
	- Sprint Planning
	- Sprint Backlog
	- Sprint Execution and Daily Scrum
	- Potential shippable product increment
	- Sprint Review
	- Sprint Retrospective

Overall the activity of creating and refining product backlog items, estimating them, and prioritizing them is known as grooming

Daily Scrum
What did I accomplish since the last daily scrum?
􏰀What do I plan to work on by the next daily scrum?
􏰀What are the obstacles or impediments that are preventing me from making progress?


Whereas the sprint review is a time to inspect and adapt the product, 
the sprint retrospective is an opportunity to inspect and adapt the process

Sprint Review
this activity is the conversation that takes place among its participants, which include the Scrum team, stakeholders, sponsors, customers, and interested members of other teams. The conversation is focused on reviewing the just-com- pleted features in the context of the overall development effort. Everyone in atten- dance gets clear visibility into what is occurring and has an opportunity to help guide the forthcoming development to ensure that the most business-appropriate solution is created.people outside the Scrum team can perform intra-sprint feature reviews and provide feedback to help the Scrum team better achieve its sprint goal.

Sprint Retrospective
During the sprint retrospective the development team, ScrumMaster, and product owner come together.to discuss what is and is not working with Scrum and associated technical practices. The focus is on the continuous process improvement necessary to help a good Scrum team become great. At the end of a sprint retrospective the Scrum team should have identified and committed to a practical number of process improvement actions that will be undertaken by the Scrum team in the next sprint. 


Sprint Characteristic
	- Time Boxed
		- Responsibility (Complete what you defined)
		- Capability (Learn about team)
		- Motivation (Encourages to have the work done)
		- Limiting WIP
		- Forces Prioritization
		- Avoid Perfectionism
		- Motivates Closure
		- Improved Predictability
	- Short Duration
		- Easy to Plan
		- Bounded Error
		- Excitement over time
		- Checkpoint
		- Fast Feedback
		- ROI

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Requirement and User Story

Sequential
With sequential product development, requirements are treated much as they are in manufacturing: They are required, nonnegotiable specifications to which the prod- uct must conform. These requirements are created up front and given to the develop- ment group in the form of a highly detailed document. It is the job of the development group, then, to produce a product that conforms to the detailed requirements.
Sequential product development relies heavily on written requirements, which look impressive but can easily be misunderstood.
With sequential product development all requirements must be at the same level of detail at the same time. 

Scrum
When using Scrum, we don’t invest a great deal of time and money in fleshing out the details of a requirement up front. Because we expect the specifics to change as time passes and as we learn more about what we are building, we avoid overinvesting in requirements that we might later discard. Instead of compiling a large inventory of detailed requirements up front, we create placeholders for the requirements, called product backlog items (PBIs). Each product backlog item repre- sents desirable business value
A way to better ensure that the desired features are being built is for the peo- ple who know what they want to have timely conversations with the people who are designing, building, and testing those features.
We employ a strategy of progressive refinement to disaggregate, in a just-in-time fashion, large, lightly detailed requirements into a set of smaller, more detailed items.



User Story Contains
	- Small Requirement - As a user
	- Tasks
	- Acceptance Criteria

Scrum 
	- Timely Converstion
	- Progressive Refinement

Story Size 
	- Epic 
		- The largest would be stories that are a few to many months in size and might span an entire release or mul- tiple releases. Many people refer to these as epics
	- Features 
		- those that are often on the order of weeks in size and therefore too big for a single sprint. Some teams might call these features
	- Stories
		- These are small enough for sprint that obeys INVEST
	- Theme 
		- refer to a collection of related stories.Themes provide a convenient way to say that a bunch of stories have something in common, such as being in the same functional area

Tasks are the layer below stories, typically worked on by only one person, or per- haps a pair of people. Tasks typically require hours to perform. When we go to the task layer, we are specifying how to build something instead of what to build 
Epics - Useful for Progressive Refinement


User Story 
I - goal is not to eliminate but to reduce interdependencies
N - should be about what and why not how
V - Not be technical, should have value that can be understood by product owner to prioritize them
E - Not be ambigouis and must be estimable (Size, effort and cost)
S - Small enought complete in one sprint
T - either pass or fail (Acceptance Criteria)

If very technical product owner will not be able to understand it and prioritize it.
business value of any technical story has to be justifiable to the product owner. Because product owners think in economic terms, there needs to be an economic justification for doing this prototyping work
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Product Backlog


Types of Product BackLog Items
	- Feature 
		- As a customer service representative I want to create a ticket for a customer support issue so that I can record and manage a customer’s request for support.
	- Change 
		- As a customer service representative I want the default ordering of search results to be by last name instead of ticket number so that it’s easier to find a support ticket.
	- Defect
		- Fix defect #256 in the defect-tracking system so that special characters in search terms won’t make customer searches crash.
	- Technical Improvement
		- Move to the latest version of the Oracle DBMS.
	- Knowledge Acquisition 
		- Create a prototype or proof of concept of two architectures and run three tests to determine which would be a better approach for our product.

User Stories consists (user stories), (testing/bug),(design,process stuff,deployment process), Knowledge Acquisition


DEEP
	D - Detailed Appropriately
		- PBIs that we plan to work on soon should be near the top of the backlog, small in size, and very detailed so that they can be worked on in a near-term sprint
	E - Emergent 
		- constantly emerging, product owner must rebalance and reprioritize the product backlog, taking the new information into account
	E - Estimated
		- These size estimates need to be reasonably accurate without being overly precise. Because items near the top of the backlog are smaller and more detailed, they will have smaller, more accurate size estimates.
	P - Prioritized
		- useful to prioritize the near-term items that are destined for the next few sprints. Perhaps it is valuable to prioritize as far down in the backlog as we think we can get in Release 1. Going beyond that point at anything other than a gross level of prioritization is likely not worth our time.

Grooming - creating and refining (adding details to) PBIs, estimating PBIs, and prioritizing PBIs.
Product owner take help from stake holder and development team to do grooming.
Grooming can happen at any time before after or during sprint. Progressive Refinement

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Application Based Area

Reasons to Reject a user Story
	- Ambigous or not clear as to what they want , These are not testable
	- Size is too big and lot of ands
	- Technical Verbose not understood by product owner
	- If it is not testable

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Responsibility 


Product Owner 
the product owner is the person who represents the customers or users wants and desires (goals and visions). The product owner is usually a key individual who may in many instances control the funding for the project to be developed, or if he or she doesn’t control funding, is responsible to those who do for delivering their visions in a way their return on investment is maximized.
a product owner is the leader responsible for maximizing the value of the products created by a scrum development team.
But to do this, an agile product owner takes on several roles, including business strategist, product designer, market analyst, customer liaison, and project manager.
Roles and Responsibilities
	- Defining Vision
	- Managing Product Backlog and Prioritizing it 
	- Prioritizing needs
	- Overseeing development stages
	- Anticipating Client Needs

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

